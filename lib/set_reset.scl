FUNCTION "setReset_rd" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      s : Bool;
      r : Bool;
   END_VAR

   VAR_IN_OUT 
      q : Bool;
   END_VAR


BEGIN
	// Set-reset (sd = reset dominant)
	
	IF #r THEN
	    #q := false;
	ELSIF #s THEN
	    #q := true;
	END_IF;
	
END_FUNCTION

FUNCTION "setReset_sd" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      s : Bool;
      r : Bool;
   END_VAR

   VAR_IN_OUT 
      q : Bool;
   END_VAR


BEGIN
	// Set-reset (sd = reset dominant)
	
	IF #s THEN
	    #q := true;
	ELSIF #r THEN
	    #q := false;
	END_IF;
	
END_FUNCTION

FUNCTION "syncReal" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      var1 : Real;   // primary
      var2 : Real;   // secoundary
      memory : Real;
   END_VAR


BEGIN
	// Make two variables have the same value. If one change, the
	// value will be transfer to the other one.
	
	IF #var1 = #memory THEN
	    #var1 := #var2;
	ELSE
	    #var2 := #var1;
	END_IF;
	
	#memory := #var2;
	
END_FUNCTION


FUNCTION_BLOCK "setResetTimer"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      in : Bool;
      pt : Time;
      set : Bool;
      reset : Bool;
   END_VAR

   VAR_OUTPUT DB_SPECIFIC
      q : Bool;
   END_VAR

   VAR 
      "timer" {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : IEC_TIMER;
      timer_q : Bool;
   END_VAR


BEGIN
	// Once the timer has elapsed, the output
	// will stay true until it's reset.
	
	#timer.TON(IN := #in, PT := #pt, Q => #timer_q);
	
	IF #set THEN
	    #q := true;
	ELSIF #reset THEN
	    #q := false;
	ELSIF #timer_q THEN
	    #q := true;
	END_IF;
	
END_FUNCTION_BLOCK



