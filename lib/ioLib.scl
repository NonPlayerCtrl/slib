TYPE "ioGlobalUdt"
VERSION : 0.1
   STRUCT
      ackAllAlarms : Bool;   // Acknowledge all alarms
      disableAllSim : Bool;   // Disable all simulation of input values
      "_" : Bool;
      totalActiveSim { ExternalWritable := 'False'} : UInt;   // Total active simulations
      totalActiveAlarms { ExternalWritable := 'False'} : UInt;   // Total active alarms
      totalUnacknowledgedAlarms { ExternalWritable := 'False'} : UInt;
   END_STRUCT;

END_TYPE

FUNCTION "runningAvg" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      in : Real;
      filterConst : Real;   // 0 <= x < 1. 0=>no filter.
   END_VAR

   VAR_IN_OUT 
      q : Real;
   END_VAR

   VAR_TEMP 
      tmpFilterConst : Real;
   END_VAR


BEGIN
	// Running average smoothing filter.
	//  - filter const have to be greater or equal to zero
	//    and also less then one.
	//  - Scan time will affect the filter.
	
	#tmpFilterConst := LIMIT(MN := 0, IN := #filterConst, MX := 0.999999);
	#q := #tmpFilterConst * #q + (1 - #tmpFilterConst) * #in;
	
END_FUNCTION

TYPE "alarmRealUdt"
VERSION : 0.1
   STRUCT
      value { ExternalWritable := 'False'} : Real;
      action { S7_SetPoint := 'True'} : SInt;
      lim { S7_SetPoint := 'True'} : Real;   // Alarm limit
      hyst { S7_SetPoint := 'True'} : Real;   // Hysteresis
      delay { S7_SetPoint := 'True'} : Time;   // Alarm delay
      delayEt { ExternalWritable := 'False'} : Time;   // delay elapsed time
      enable { S7_SetPoint := 'True'} : Bool;   // Enable alarm
      autoAck { S7_SetPoint := 'True'} : Bool := true;   // manual acknowledge
      dobleAck { S7_SetPoint := 'True'} : Bool;
      ack : Bool;   // acknowledge alarm
      memAck { ExternalWritable := 'False'} : Bool;   // Can be used for buzzer
      Q { ExternalWritable := 'False'} : Bool;   // output
   END_STRUCT;

END_TYPE

TYPE "analogInUdt"
VERSION : 0.1
   STRUCT
      raw : Int;
      sim : Bool;   // Simulate  value
      forceInsideScale { S7_SetPoint := 'True'} : Bool := true;
      error : Bool;
      errorAction { S7_SetPoint := 'True'} : SInt := 2;   // 1:min, 2:max
      scaleMin { S7_SetPoint := 'True'} : Real := 0.0;
      scaleMax { S7_SetPoint := 'True'} : Real := 100.0;
      factor { S7_SetPoint := 'True'} : Real := 1.0;
      bias { S7_SetPoint := 'True'} : Real := 0.0;
      filterConst { S7_SetPoint := 'True'} : Real;   // 0 <= x < 1
      Q : Real;   // value
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK "ioGlobal_FB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR 
      hmi : "ioGlobalUdt";
      z_internal_timer {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : IEC_TIMER;
      z_internal : Struct
         fs : Bool := true;
         timer_mem : Time;
      END_STRUCT;
      collectInfo : Struct
         activeSimCnt : UInt;
         activeAlarmsCnt : UInt;
         unacknowledgedAlarmsCnt : UInt;
      END_STRUCT;
      info2ioBlocks : Struct
         runtime_diff : Time;
         ackAllAlarms : Bool;
         disableAllSim : Bool;
         firstScan : Bool := true;
      END_STRUCT;
   END_VAR


BEGIN
	// ioGlobal: This block handels common function for io, eg:
	//  - count active simulations
	//  - Disable all simulations
	//  - Count active alarms
	//  - Ack. all active alarms
	
	// Calculate time of each plc scan.
	#z_internal_timer.TON(IN := NOT #z_internal_timer.Q, PT := T#24d);
	IF  #z_internal_timer.ET <> #z_internal.timer_mem THEN
	    #info2ioBlocks.runtime_diff := #z_internal_timer.ET - #z_internal.timer_mem;
	END_IF;
	#z_internal.timer_mem := #z_internal_timer.ET;
	
	// First scan
	#info2ioBlocks.firstScan := #z_internal.fs ;
	#z_internal.fs := false;
	
	// Common information to all io-blocks.
	#info2ioBlocks.ackAllAlarms := #hmi.ackAllAlarms;
	#info2ioBlocks.disableAllSim := #hmi.disableAllSim;
	// Make sure that ack only happens once.
	#hmi.ackAllAlarms := false;
	#hmi.disableAllSim := false;
	
	// Information from io-blocks.
	#hmi.totalActiveAlarms := #collectInfo.activeAlarmsCnt;
	#hmi.totalActiveSim := #collectInfo.activeSimCnt;
	#hmi.totalUnacknowledgedAlarms := #collectInfo.unacknowledgedAlarmsCnt;
	// Reset the counter for new collection of info on next scan.
	#collectInfo.activeAlarmsCnt := 0;
	#collectInfo.activeSimCnt := 0;
	#collectInfo.unacknowledgedAlarmsCnt := 0;
	
	// ( https://github.com/rexhip/ )
END_FUNCTION_BLOCK

TYPE "analogInAndAlarmsUdt"
VERSION : 0.1
   STRUCT
      ai : "analogInUdt";
      execAi { S7_SetPoint := 'True'} : Bool := true;   // Execute ai logic
      alarmL : "alarmRealUdt";
      alarmLL : "alarmRealUdt";
      alarmH : "alarmRealUdt";
      alarmHH : "alarmRealUdt";
   END_STRUCT;

END_TYPE

TYPE "alarmBoolSimpleUdt"
VERSION : 0.1
   STRUCT
      in { ExternalWritable := 'False'} : Bool;   // Input
      enable { S7_SetPoint := 'True'} : Bool;   // Enable alarm
      autoAck { S7_SetPoint := 'True'} : Bool := true;   // Alarm will go away automaticaly when in goes false.
      dobleAck { S7_SetPoint := 'True'} : Bool;
      ack : Bool;   // Acknowledge alarm
      memAck { ExternalWritable := 'False'} : Bool;   // Active alarm has been acknowledged
      Q { ExternalWritable := 'False'} : Bool;   // Output
   END_STRUCT;

END_TYPE

FUNCTION "AlarmReal" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      value : Real;   // Value that will be compared
      action : SInt;   // 1=Greater then, 2=less then
      disable : Bool;   // diable alarm
   END_VAR

   VAR_IN_OUT 
      runtimeDiff : Time;   // Time of last program scan, used for internal timer
      alarm : "alarmRealUdt";
   END_VAR

   VAR_TEMP 
      tmpQset : Bool;
      tmpQrst : Bool;
   END_VAR

   VAR CONSTANT 
      LESS_THEN : SInt := 1;
      GREATER_THEN : SInt := 2;
   END_VAR


BEGIN
	// Value alarm
	
	#alarm.value := #value;
	#alarm.action := #action;
	
	IF #alarm.enable AND NOT #disable THEN
	    CASE #action OF
	        #LESS_THEN: // (1)
	            #tmpQset := #value < #alarm.lim;
	            #tmpQrst := #value > #alarm.lim + #alarm.hyst;
	        #GREATER_THEN: // (2)
	            #tmpQset := #value > #alarm.lim;
	            #tmpQrst := #value < #alarm.lim - #alarm.hyst;
	    END_CASE;
	    IF #alarm.Q THEN  // if alarm has been activated.
	        #alarm.memAck := #alarm.memAck OR #alarm.ack; // Acknowledge
	        IF #tmpQrst AND (
	            #alarm.autoAck
	            OR #alarm.memAck AND NOT #alarm.dobleAck
	            OR #alarm.ack AND #alarm.dobleAck )
	        THEN
	            #alarm.Q := false;
	        END_IF;
	    ELSE  // Not #alarm.Q
	        IF #tmpQset THEN
	            #alarm.delayEt += #runtimeDiff;
	            IF #alarm.delayEt >= #alarm.delay THEN
	                #alarm.Q := true;
	                #alarm.memAck := false;
	            END_IF;
	        ELSE
	            #alarm.delayEt := T#0s;
	        END_IF;
	    END_IF;
	    #alarm.ack := false;
	    
	ELSE // Alarm disabled
	    #alarm.Q := false;
	    #alarm.delayEt := T#0s;
	END_IF;
	
	// ( https://github.com/rexhip/ )
	
END_FUNCTION

FUNCTION "ioGlobalAndAlarm" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      alarm : "alarmRealUdt";
      ioGlobal : "ioGlobal_FB";
   END_VAR


BEGIN
	// Connecting ioGlobal functions with valueAlarm.
	
	// Acknowle alarm
	#alarm.ack := #ioGlobal.info2ioBlocks.ackAllAlarms;
	
	// Count active alarms
	#ioGlobal.collectInfo.activeAlarmsCnt
	+= BOOL_TO_UINT(#alarm.Q);
	// Count unacknowledged alarms
	#ioGlobal.collectInfo.unacknowledgedAlarmsCnt +=
	BOOL_TO_UINT(#alarm.Q AND NOT #alarm.memAck);
	
	// ( https://github.com/rexhip/ )
END_FUNCTION

FUNCTION "analogIn" : Void
TITLE = Analog input
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      in : Int;
   END_VAR

   VAR_IN_OUT 
      ai : "analogInUdt";
   END_VAR

   VAR_TEMP 
      tmp : Real;
   END_VAR


BEGIN
	// Analog input 
	
	#ai.raw := #in;
	
	IF #ai.sim THEN
	    ; // A simulated value can be set directly to #io.q
	ELSE
	    #ai.error := #in < -4864 OR #in > 32512;
	    IF #ai.error THEN
	        CASE #ai.errorAction OF
	            1:  // Go to min value
	                #tmp := 0;
	            2:  // Go to max value
	                #tmp := 1;
	        END_CASE;
	    ELSE
	        #tmp := NORM_X(MIN := 0, VALUE := #in, MAX := 27648);
	        IF #ai.forceInsideScale THEN
	            #tmp := LIMIT(MN := 0, IN := #tmp, MX := 1);
	        END_IF;
	    END_IF;
	    #tmp := SCALE_X(MIN := #ai.scaleMin, MAX := #ai.scaleMax,
	                     VALUE := #tmp) * #ai.factor + #ai.bias;
	     "runningAvg"(in := #tmp, filterConst := #ai.filterConst, q := #ai.Q );
	END_IF;
	
	// ( https://github.com/rexhip/ )
	
END_FUNCTION

TYPE "digitalInUdt"
VERSION : 0.1
   STRUCT
      sim : Bool;   // Simulate input
      invert { S7_SetPoint := 'True'} : Bool;   // Invert input
      Error : Bool;   // External error
      Q : Bool;   // Output
      delay { S7_SetPoint := 'True'} : Time;   // Input delay
      delayEt : Time;
      alarm : "alarmBoolSimpleUdt";
      timeOn {OriginalPartName := 'DTL'; LibVersion := '1.0'} : DTL;
      timeOff {OriginalPartName := 'DTL'; LibVersion := '1.0'} : DTL;
   END_STRUCT;

END_TYPE

FUNCTION "alarmBoolSimple" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      in : Bool;
   END_VAR

   VAR_IN_OUT 
      alarm : "alarmBoolSimpleUdt";
   END_VAR


BEGIN
	// Simple digital alarm 
	
	IF #alarm.enable THEN
	    IF #alarm.Q THEN
	        #alarm.memAck := #alarm.memAck OR #alarm.ack; // Acknowledge
	        IF NOT #alarm.in AND (
	            #alarm.autoAck
	            OR #alarm.memAck AND NOT #alarm.dobleAck
	            OR #alarm.ack AND #alarm.dobleAck )
	        THEN
	            #alarm.Q := false;
	        END_IF;
	    ELSIF #alarm.in THEN
	        #alarm.Q := true;
	        #alarm.memAck := false;
	    END_IF;
	    #alarm.ack := false;
	    
	ELSE // Alarm is disabled
	    #alarm.Q := false;
	END_IF;
	
END_FUNCTION

FUNCTION "analogInAndAlarms" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      in : Int;
   END_VAR

   VAR_IN_OUT 
      ai : "analogInAndAlarmsUdt";
      ioGlobal : "ioGlobal_FB";
   END_VAR

   VAR CONSTANT 
      VALUE_LESS_THEN_LIM : SInt := 1;
      VALUE_GREATER_THEN_LIM : SInt := 2;
   END_VAR


BEGIN
	// Analog input with alarm handling. 
	
	#ai.ai.sim := #ai.ai.sim AND NOT #ioGlobal.info2ioBlocks.disableAllSim;
	
	IF #ai.execAi THEN // Execute analog input logic
	    "analogIn"(in := #in,
	               ai := #ai.ai);
	    
	    (* "runningAvg"(in:=_real_in_,
	                    filter:=_real_in_,
	                    q:=_real_inout_); *)
	END_IF;
	// Count active simulations 
	#ioGlobal.collectInfo.activeSimCnt += BOOL_TO_UINT(#ai.ai.sim);
	
	// Connecting ioGlobal functions with each alarm.
	"ioGlobalAndAlarm"(alarm := #ai.alarmHH,
	                   ioGlobal := #ioGlobal);
	"ioGlobalAndAlarm"(alarm := #ai.alarmH,
	                   ioGlobal := #ioGlobal);
	"ioGlobalAndAlarm"(alarm := #ai.alarmLL,
	                   ioGlobal := #ioGlobal);
	"ioGlobalAndAlarm"(alarm := #ai.alarmL,
	                   ioGlobal := #ioGlobal);
	
	"AlarmReal"(value := #ai.ai.Q, // HH alarm
	            action := #VALUE_GREATER_THEN_LIM,
	            disable := false,
	            runtimeDiff := #ioGlobal.info2ioBlocks.runtime_diff,
	            alarm := #ai.alarmHH);
	
	"AlarmReal"(value := #ai.ai.Q,// H alarm
	            action := #VALUE_GREATER_THEN_LIM,
	            disable := #ai.alarmHH.Q,
	            runtimeDiff := #ioGlobal.info2ioBlocks.runtime_diff,
	            alarm := #ai.alarmH);
	
	"AlarmReal"(value := #ai.ai.Q, // LL alarm
	            action := #VALUE_LESS_THEN_LIM,
	            disable := false,
	            runtimeDiff := #ioGlobal.info2ioBlocks.runtime_diff,
	            alarm := #ai.alarmLL);
	
	"AlarmReal"(value := #ai.ai.Q, // L alarm
	            action := #VALUE_LESS_THEN_LIM,
	            disable := #ai.alarmLL.Q,
	            runtimeDiff := #ioGlobal.info2ioBlocks.runtime_diff,
	            alarm := #ai.alarmL);
	
	// ( https://github.com/rexhip/ )
END_FUNCTION

TYPE "analogOutUdt"
VERSION : 0.1
   STRUCT
      ao { ExternalWritable := 'False'} : Real;
      failSafe { ExternalWritable := 'False'} : Bool;
      simEnable : Bool;
      disableSim { ExternalWritable := 'False'; S7_SetPoint := 'True'} : Bool;
      failSafeValue { ExternalWritable := 'False'; S7_SetPoint := 'True'} : SInt := 0;   // Percent value on error, -1=keep value
      scaleMin { ExternalWritable := 'False'; S7_SetPoint := 'True'} : Real := 0.0;
      scaleMax { ExternalWritable := 'False'; S7_SetPoint := 'True'} : Real := 100.0;
      simValue : Real := 0.0;
   END_STRUCT;

END_TYPE

TYPE "digitalOutUdt"
VERSION : 0.1
   STRUCT
      in : Bool;
      simEnable : Bool;
      simValue : Bool := 0;
      failSafe { ExternalWritable := 'False'} : Bool;
      failSafeValue { ExternalWritable := 'False'; S7_SetPoint := 'True'} : Bool;
      disableSim { ExternalWritable := 'False'; S7_SetPoint := 'True'} : Bool;
      invert { ExternalWritable := 'False'; S7_SetPoint := 'True'} : Bool;   // Invert output
   END_STRUCT;

END_TYPE

FUNCTION "analogInReal" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      in : Real;
      error : Bool;
   END_VAR

   VAR_IN_OUT 
      ai : "analogInAndAlarmsUdt";
      ioGlobal : "ioGlobal_FB";
   END_VAR

   VAR_TEMP 
      dommy : Int;
   END_VAR


BEGIN
	// Analog input 
	
	#ai.ai.error := #error;
	
	IF #ai.ai.sim THEN
	    ;
	ELSE
	    #ai.ai.Q := #in;
	END_IF;
	
	#ai.execAi := false;
	"analogInAndAlarms"(in := #dommy,
	                    ai := #ai,
	                    ioGlobal := #ioGlobal);
	
	// ( https://github.com/rexhip/ )
END_FUNCTION

FUNCTION "digitalOut" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_OUTPUT 
      Out : Bool;
   END_VAR

   VAR_IN_OUT 
      do : "digitalOutUdt";
      ioGlobal : "ioGlobal_FB";
   END_VAR

   VAR_TEMP 
      t : Bool;
   END_VAR


BEGIN
	// Digital out
	//
	// - For most application a analog output block is not needed. However
	//
	// - failSafe: Output will go to a predefined value set by failSafeValue (%),
	//   this can be used for emergency stop, simulation will not work when
	//   failSafe is activated.
	
	IF #do.disableSim OR #ioGlobal.info2ioBlocks.disableAllSim THEN
	    #do.simEnable := false;
	END_IF;
	
	IF #do.failSafe THEN
	    #t := #do.failSafeValue;
	ELSE
	    #t := SEL(G := #do.simEnable,
	              IN0 := #do.in XOR #do.invert,
	              IN1 := #do.simValue);
	END_IF;
	#do.simValue := #Out := #t;
	
	#ioGlobal.collectInfo.activeSimCnt += BOOL_TO_USINT(#do.simEnable);
	
	// ( https://github.com/rexhip/ )
END_FUNCTION

FUNCTION "analogOut" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_OUTPUT 
      q : Int;
   END_VAR

   VAR_IN_OUT 
      ao : "analogOutUdt";
      ioGlobal : "ioGlobal_FB";
   END_VAR

   VAR_TEMP 
      tmp : Real;
   END_VAR


BEGIN
	// Analog out 
	
	// - failSafe: Output will go to a predefined value set by failSafeValue (%),
	//   this can be used for emergency stop, simulation will not work when failSafe
	//   is activated.
	
	IF #ao.#disableSim OR #ioGlobal.info2ioBlocks.disableAllSim THEN
	    #ao.simEnable := false;
	END_IF;
	
	IF #ao.failSafe THEN
	    #tmp := SINT_TO_REAL(#ao.failSafeValue) / 100;
	ELSE
	    #tmp := NORM_X(MIN := #ao.scaleMin, MAX := #ao.scaleMax,
	                   VALUE := SEL(G := #ao.simEnable,
	                                IN0 := #ao.ao, IN1 := #ao.simValue));
	END_IF;
	#tmp := LIMIT(MN := 0, IN := #tmp, MX := 1);
	#q := SCALE_X_INT(MIN := 0, VALUE := #tmp, MAX := 27648);
	#ao.simValue := SCALE_X_INT(MIN := #ao.scaleMin, VALUE := #tmp, MAX := #ao.scaleMax);
	
	#ioGlobal.collectInfo.activeSimCnt += BOOL_TO_UINT(#ao.simEnable);
	
	// ( https://github.com/rexhip/ )
END_FUNCTION

FUNCTION "digitalIn" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      in : Bool;
   END_VAR

   VAR_IN_OUT 
      di : "digitalInUdt";
      ioGlobal : "ioGlobal_FB";
   END_VAR

   VAR_TEMP 
      e : Int;
      tmpQ : Bool;
      tmpIn : Bool;
   END_VAR


BEGIN
	// Digital input ( https://github.com/rexhip/ )
	
	IF #di.sim THEN
	    #di.delayEt := T#0ms;
	ELSE
	    #tmpQ := #di.Q;
	    #tmpIn := #in XOR #di.invert;
	    IF #tmpIn AND NOT #di.Q THEN
	        #di.delayEt += #ioGlobal.info2ioBlocks.runtime_diff;
	    ELSIF NOT #tmpIn THEN
	        #di.delayEt := T#0ms;
	    END_IF;
	    #di.Q := #di.delayEt >= #di.delay;
	    
	    // Logging - the time the input change state.
	    IF #di.Q AND NOT #tmpQ  THEN
	        #e := RD_LOC_T(#di.timeOn);
	    ELSIF NOT #di.Q AND #tmpQ THEN
	        #e := RD_LOC_T(#di.timeOff);
	    END_IF;
	END_IF;
	
	"alarmBoolSimple"(in := #di.Q, alarm := #di.alarm);
	
	#ioGlobal.collectInfo.activeAlarmsCnt += BOOL_TO_UINT(#di.alarm.Q);
	#ioGlobal.collectInfo.activeSimCnt += BOOL_TO_UINT(#di.sim);
	
	
	// ( https://github.com/rexhip/ )
END_FUNCTION

DATA_BLOCK "ioGlobal"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"ioGlobal_FB"

BEGIN

END_DATA_BLOCK

FUNCTION_BLOCK "example_analogOutpus"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_OUTPUT 
      ao_FV01 : Int;
      ao_FV02 : Int;
   END_VAR

   VAR RETAIN
      FV01 : "analogOutUdt";
      FV02 : "analogOutUdt";
   END_VAR


BEGIN
	
	
	"analogOut"(ao := #FV01, ioGlobal := "ioGlobal", q => #ao_FV01);
	"analogOut"(ao := #FV02, ioGlobal := "ioGlobal", q => #ao_FV02);
	
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "example_digitalInputs"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      di_PAH01 : Bool;
      di_PAH02 : Bool;
   END_VAR

   VAR RETAIN
      PAH01 : "digitalInUdt";
      PAH02 : "digitalInUdt";
   END_VAR


BEGIN
	
	"digitalIn"(in := #di_PAH01, di := #PAH01, ioGlobal := "ioGlobal");
	"digitalIn"(in := #di_PAH02, di := #PAH02, ioGlobal := "ioGlobal");
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "example_digitalOutpus"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_OUTPUT 
      do_PX01 : Bool;
      do_PX02 : Bool;
   END_VAR

   VAR RETAIN
      PX01 : "digitalOutUdt";
      PX02 : "digitalOutUdt";
   END_VAR


BEGIN
	
	"digitalOut"(Out => #do_PX01, "do" := #PX01, ioGlobal := "ioGlobal");
	"digitalOut"(Out => #do_PX02, "do" := #PX02, ioGlobal := "ioGlobal");
	
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "example_analogInputs"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      ai_FT12 : Int;
      ai_TT27 : Int;
      value_from_other_source : Real;
   END_VAR

   VAR RETAIN
      FT12 : "analogInAndAlarmsUdt";
      TT27 : "analogInAndAlarmsUdt";
      PT44 : "analogInAndAlarmsUdt";
   END_VAR


BEGIN
	// Analog inputs example. ( https://github.com/rexhip/ )
	
	// In a real world example the input on this block
	// would be PLC-tags connected to fysical IO.
	
	"analogInAndAlarms"(in := #ai_FT12, ai := #FT12, ioGlobal := "ioGlobal");
	"analogInAndAlarms"(in := #ai_TT27, ai := #TT27, ioGlobal := "ioGlobal");
	
	// Value arriving from other source, eg. profinet.
	"analogInReal"(in := #value_from_other_source,
	               error := false, // Should be provided in case comm. error.
	               ai := #PT44,
	               ioGlobal := "ioGlobal");
	
END_FUNCTION_BLOCK

FUNCTION "_ioReadme" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	(* 
	
	- Warning: the blocks are not tested yet.
	
	- Note: The library may change name in the future.
	
	*)
	
	
	
	
END_FUNCTION

DATA_BLOCK "example_DO"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"example_digitalOutpus"

BEGIN

END_DATA_BLOCK

DATA_BLOCK "example_DI"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"example_digitalInputs"

BEGIN

END_DATA_BLOCK

DATA_BLOCK "example_AO"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"example_analogOutpus"

BEGIN

END_DATA_BLOCK

DATA_BLOCK "example_AI"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
NON_RETAIN
"example_analogInputs"

BEGIN

END_DATA_BLOCK

ORGANIZATION_BLOCK "example_ioMain"
TITLE = "Main Program Sweep (Cycle)"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	// IO handling
	
	"_ioReadme"();
	
	"ioGlobal"(); // Common functionallyti for all io.
	
	"example_AI"(); // Analog inputs
	"example_AO"(); // Analog outputs
	
	"example_DI"(); // Digital inputs
	"example_DO"(); // Digital outputs
	
END_ORGANIZATION_BLOCK

