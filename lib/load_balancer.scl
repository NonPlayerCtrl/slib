TYPE "udt_load_balancer_settings"
VERSION : 0.1
   STRUCT
      bypass { S7_SetPoint := 'True'} : Bool;
      max_devices_same_time { S7_SetPoint := 'True'} : UInt := 65535;   // Setting, max devices that can participate at the same time
      max_diff_operating_time { S7_SetPoint := 'True'} : UDInt := 4294967295;   // Between device with most and least operating time
      start : Struct   // Condition for starting a device
         limit { S7_SetPoint := 'True'} : Real := 90.0;
         delay { S7_SetPoint := 'True'} : Time := T#3m;
         force : Bool;
      END_STRUCT;
      stop : Struct   // Condition for stopping a device
         limit { S7_SetPoint := 'True'} : Real := 20.0;
         delay { S7_SetPoint := 'True'} : Time := T#2m;
         force : Bool;
      END_STRUCT;
      info : Struct
         total : UInt;   // Total available devices
         in_operation : UInt;   // Number of devices in operation
         standby : UInt;   // Devices standby for operation
      END_STRUCT;
   END_STRUCT;

END_TYPE

TYPE "udt_load_balancer_device"
VERSION : 0.1
   STRUCT
      in : Struct
         in_operation : Bool;   // Device in operation
         available : Bool := true;   // Device is available for load balancer.
      END_STRUCT;
      out : Struct
         start : Bool;   // Main output
         operation_time : UDInt;   // sec
      END_STRUCT;
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK "load_balancer"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      input : Real;   // percent
   END_VAR

   VAR_IN_OUT 
      devices : Array[*] of "udt_load_balancer_device";
      settings : "udt_load_balancer_settings";   // Comman settings
   END_VAR

   VAR RETAIN
      conf : Struct   // Configuration
         en_operation_time_cnt { S7_SetPoint := 'True'} : Bool := true;   // Enable operation time cnt
         at_least_one { S7_SetPoint := 'True'} : Bool := true;   // At least one device will always be in operation
         bypass_InOperation_signal { S7_SetPoint := 'True'} : Bool := true;
         input_zero_reset : Time := T#10m;
      END_STRUCT;
   END_VAR
   VAR 
      timer_start {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : IEC_TIMER;
      timer_start_q : Bool;
      timer_stop {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : IEC_TIMER;
      timer_stop_q : Bool;
      timer_input_zero {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : IEC_TIMER;
      timer_input_zero_q : Bool;
      old_sec : USInt;
      runtime_mem1 : LReal;
      runtime_mem2 : LReal;
   END_VAR

   VAR_TEMP 
      candidate_start : Struct
         index : DInt;
         operation_time : UDInt;
      END_STRUCT;
      candidate_stop : Struct
         index : DInt;
         operation_time : UDInt;
      END_STRUCT;
      lower : DInt;
      upper : DInt;
      c : DInt;
      rd_sys_t {OriginalPartName := 'DTL'; LibVersion := '1.0'} : DTL;
      error : Int;
      info : Struct
         devices_in_operation : UInt;
         devices_in_standby : UInt;
      END_STRUCT;
      t_diff : USInt;
   END_VAR


BEGIN
	//   Load balancer: 
	//   
	//   https://github.com/rexhip/	
	//
	// - If devices (eg. pumps) work in parallell, the function will start or stop devices
	//   to operate as the demand increase or decrease.
	// - A devices will be added for operation, if #input is above a certain value for a
	//   ceratin time, eg above 90% for 50 seconds. Likewise a devices will be removed from
	//   operation if #input is bellow a certain value for a certain time, eg. 10% for 30
	//   secunds. The limits and the times are adjustable inside #settings.
	// - It's the device with least operating time that will be added first, and the device
	//   with most operating hours will be removed from operation first.
	// - #input will typically be the output of a pid-controller
	// - For vfd, there should be configured a ramp time to make a smooth transition when a
	//   device is added or removed for operation.
	// - #devices[*].in.in_operation, is a input for fyscical feedback signal from the
	//   devices. this feature can be disabled by setting
	//   #load_balancer.conf.bypass_InOperation_signal, to true.
	// --- --- --- --- --- 
	
	// If input is zero for a certain time, then all outputs is set to false.
	#timer_input_zero.TON(IN := #input = 0, PT := #conf.input_zero_reset,
	                      Q => #timer_input_zero_q);
	
	// Default values, if the value is still present after the
	// for-loop (bellow), then there is no "candidate".
	#candidate_stop.index := 16#7fffffff;
	#candidate_start.index := 16#7fffffff;
	
	// Set to max, try find a lesser value in the for-loop bellow.
	#candidate_start.operation_time := 16#ffffffff;
	
	// Operating time preparing calculations:
	#runtime_mem2 += RUNTIME(#runtime_mem1);
	#runtime_mem2 := SEL(G := #conf.en_operation_time_cnt, IN0 := 0, IN1 := #runtime_mem2);
	#t_diff := LREAL_TO_USINT(FLOOR(#runtime_mem2)); // "Overflow" if >= 1 sec.
	#runtime_mem2 -= USINT_TO_LREAL(#t_diff);
	
	#lower := LOWER_BOUND(ARR := #devices, DIM := 1);
	#upper := UPPER_BOUND(ARR := #devices, DIM := 1);
	FOR #c := #lower TO #upper DO
	    
	    #devices[#c].out.start := #devices[#c].out.start
	    (* *)AND #devices[#c].in.available // Disable devices that are not available. 
	    (* *)AND NOT #timer_input_zero_q // Input has been zero for a ceratain time.
	    OR #settings.bypass; // If bypass, then enable all devices.
	    
	    // Candidate device to be stoped (the one that has the longest operating time)
	    IF #devices[#c].out.start // in use
	        AND #devices[#c].out.operation_time >= #candidate_stop.operation_time
	    THEN
	        #candidate_stop.index := #c;
	        #candidate_stop.operation_time := #devices[#c].out.operation_time;
	    END_IF;
	    
	    // Candidate device to be started (the one that has the least operating time)
	    IF #devices[#c].in.available
	        AND NOT #devices[#c].out.start // not allready in use
	        AND #devices[#c].out.operation_time < #candidate_start.operation_time
	    THEN
	        #candidate_start.index := #c;
	        #candidate_start.operation_time := #devices[#c].out.operation_time;
	    END_IF;
	    
	    // If no fysical feedback signal from device for operation, then it's possible
	    // to bypass it.
	    IF #conf.bypass_InOperation_signal THEN
	        #devices[#c].in.in_operation := #devices[#c].out.start;
	    END_IF;
	    
	    // Operating time cnt.
	    #devices[#c].out.operation_time += SEL(G := #devices[#c].in.in_operation,
	                                           IN0 := 0, IN1 := USINT_TO_UDINT(#t_diff));
	    // Count number of devices in operation.
	    #info.devices_in_operation += BOOL_TO_UINT(#devices[#c].in.in_operation);
	    // Count number of devices standby.
	    #info.devices_in_standby +=
	    BOOL_TO_UINT(NOT #devices[#c].in.in_operation AND #devices[#c].in.available);
	END_FOR;
	
	// Some info (for hmi)
	#settings.info.in_operation := #info.devices_in_operation;
	#settings.info.standby := #info.devices_in_standby;
	#settings.info.total := DINT_TO_UINT(#upper - #lower + 1);
	
	// If for some reason, the number operating devies can be limited to less
	// then available
	#settings.max_devices_same_time := // A setting.
	LIMIT(MN := 1,
	      IN := #settings.max_devices_same_time,
	      MX := #settings.info.total);
	// Force min value for param.
	#settings.max_diff_operating_time :=
	MAX(IN1 := 3600, IN2 := #settings.max_diff_operating_time);
	
	#timer_stop.TON(IN := #input < #settings.stop.limit,
	                PT := #settings.stop.delay,
	                Q => #timer_stop_q);
	#timer_start.TON(IN := #input > #settings.start.limit,
	                 PT := #settings.start.delay,
	                 Q => #timer_start_q);
	
	// Stoping a device 
	IF NOT #settings.bypass
	    AND #candidate_stop.index <> 16#7fffffff // Checks if there is a device available 
	    AND (#info.devices_in_operation > 1 // Can't remove last device in operation
	    (*      *)OR NOT #conf.at_least_one) AND ( // Possible to disable the feature
	    (* *)#info.devices_in_operation > #settings.max_devices_same_time
	    (* *)OR #timer_stop_q    
	    (* *)OR #settings.stop.force)  // Used to stop the next device (hmi)
	THEN
	    #devices[#candidate_stop.index].out.start := false; // Disable one device
	    RESET_TIMER(#timer_stop);
	    
	    // Start a devices.
	ELSIF #candidate_start.index <> 16#7fffffff // Checks if there is a candidate available
	    AND #info.devices_in_operation < #settings.max_devices_same_time
	    AND #input > 0 AND (
	    (* *)#info.devices_in_operation < 1 // At least one device operating
	    (*      *)AND #conf.at_least_one // Possible to disable the feature
	    (* *)OR #timer_start_q
	    (* *)OR #settings.start.force) // Used to starp the next device (hmi)
	THEN
	    #devices[#candidate_start.index].out.start := true; // Enable one more device
	    RESET_TIMER(#timer_start);
	    
	// Change operating devices, If the operating-time between two devies are to large.
	ELSIF #candidate_start.index = 16#7fffffff AND // Checks if there is a candidates available
	    #candidate_stop.index = 16#7fffffff AND (
	    (* *)#candidate_stop.operation_time - #candidate_start.operation_time >
	    (*      *)#settings.max_diff_operating_time ) // 
	THEN
	    // Stop the device with most operating time and start the devices with
	    // least operating time.
	    #devices[#candidate_stop.index].out.start := false;
	    #devices[#candidate_start.index].out.start := true;
	END_IF;
	
	#settings.start.force := false;
	#settings.stop.force := false;
	
END_FUNCTION_BLOCK

FUNCTION_BLOCK "_load_balancer_example"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR 
      load_balancer : "load_balancer";
   END_VAR
   VAR RETAIN
      devices { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[1..3] of "udt_load_balancer_device";
      settings { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "udt_load_balancer_settings";   // Comman settings
   END_VAR
   VAR 
      "___" : Bool;
      pid_output : Real;
      in_1_available : Bool;
      in_1_in_opreation : Bool;
      in_2_available : Bool;
      in_2_in_opreation : Bool;
      in_3_available : Bool;
      in_3_in_opreation : Bool;
      out_1 : Bool;
      out_2 : Bool;
      out_3 : Bool;
      out_1_value : Real;
      out_2_value : Real;
      out_3_value : Real;
   END_VAR


BEGIN
	// Load balancer example:
	
	// - If devices (eg. pumps) work in parallell, the function will add
	//   or remove devices to operate as the demand increase or decrease.
	// - For vfd, there should be configured a long enough ramp time to
	//   make a smooth transition when a device is added or removed for
	//   operation.
	// - More devices can be controlled, by expand the #devices array.
	// - For this theoretically example static variables bellow "___"
	//   are used, in real application the static variables would be
	//   fysical io.
	
	// - Important: both #devices and #settings need to be set to retain.
	
	// Available: Eg. in auto, no emergensy stop, ready, etc.
	#devices[1].in.available := #in_1_available;
	#devices[2].in.available := #in_2_available;
	#devices[3].in.available := #in_3_available;
	
	// input:     Typically the output of a pid-controller, the "damand".
	// devices:   A array, one element for each device.
	// settings:  Can be connected to faceplate in hmi, 
	#load_balancer(input := #pid_output, 
	               devices := #devices,
	               settings := #settings); 
	// - Important: both #devices and #settings need to be set to retain.
	// - Open the block to see the description inside.
	
	// Output to devices.
	#out_1 := #devices[1].out.start;
	#out_2 := #devices[2].out.start;
	#out_3 := #devices[3].out.start;
	
	// If vfd devices is controll by a vfd, then the pid_output shuld be forwared
	// to the vfd's:    
	#out_1_value := SEL(G := #devices[1].out.start, IN0 := 0, IN1 := #pid_output);
	#out_2_value := SEL(G := #devices[2].out.start, IN0 := 0, IN1 := #pid_output);
	#out_3_value := SEL(G := #devices[3].out.start, IN0 := 0, IN1 := #pid_output);
	
END_FUNCTION_BLOCK

